{"version":3,"sources":["cryptomonedas.png","hooks/useMoneda.js","hooks/useCriptomonedas.js","components/Error.js","components/Formulario.js","components/Cotizacion.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Label","styled","label","Select","select","useMoneda","stateInicial","monedas","useState","state","setState","onChange","e","target","value","map","opcion","key","codigo","nombre","useCriptomonedas","CoinInfo","Id","Name","FullName","MensajeError","p","Error","mensaje","Boton","input","Formulario","setMoneda","setCriptoMoneda","listaCripto","setListaCripto","error","setError","moneda","SelectMoneda","cripto","SeleccionarCripto","useEffect","a","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","type","ResultadoDiv","div","Info","Precio","Cotizacion","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","class","Contenedor","Imagen","img","Heading","h1","App","criptoMoneda","setResultado","cargando","setCargando","url","DISPLAY","setTimeout","component","src","imagen","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.907e0186.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomonedas.96e45d69.png\";","import React, { Fragment, useState } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display:block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\nconst useMoneda = (label, stateInicial, monedas) => {\r\n  const [state, setState] = useState(stateInicial);\r\n\r\n  const Seleccionar = () => (\r\n    <Fragment>\r\n      <Label>{label}</Label>\r\n      <Select onChange={(e) => setState(e.target.value)} value={state}>\r\n        <option value=\"\">- Seleccione -</option>\r\n        {monedas.map((opcion) => (\r\n          <option key={opcion.codigo} value={opcion.codigo}>\r\n            {opcion.nombre}\r\n          </option>\r\n        ))}\r\n      </Select>\r\n    </Fragment>\r\n  );\r\n\r\n  return [state, Seleccionar, setState];\r\n};\r\n\r\nexport default useMoneda;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display:block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\nconst useCriptomonedas = (label, stateInicial, monedas) => {\r\n  const [state, setState] = useState(stateInicial);\r\n\r\n  const SeleccionarCripto = () => (\r\n    <Fragment>\r\n      <Label>{label}</Label>\r\n      <Select onChange={(e) => setState(e.target.value)} value={state}>\r\n        <option value=\"\">- Seleccione -</option>\r\n        {monedas.map((opcion) => (\r\n          <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>\r\n            {opcion.CoinInfo.FullName}\r\n          </option>\r\n        ))}\r\n      </Select>\r\n    </Fragment>\r\n  );\r\n\r\n  return [state, SeleccionarCripto, setState];\r\n};\r\n\r\nexport default useCriptomonedas;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst MensajeError = styled.p`\r\n  background-color: #b7322c;\r\n  padding: 1rem;\r\n  color: #fff;\r\n  font-size: 30px;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  font-family: \"Bebas Neue\", cursive;\r\n`;\r\n\r\nconst Error = ({ mensaje }) => {\r\n  return <MensajeError>{mensaje}</MensajeError>;\r\n};\r\n\r\nexport default Error;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport useMoneda from \"../hooks/useMoneda\";\r\nimport useCriptomonedas from \"../hooks/useCriptomonedas\";\r\nimport axios from \"axios\";\r\nimport Error from \"./Error\";\r\n\r\nconst Boton = styled.input`\r\n  margin-top: 20px;\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n  padding: 10px;\r\n  background-color: #66a2fe;\r\n  border: none;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  color: #fff;\r\n\r\n  &:hover {\r\n    background-color: #326ac0;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Formulario = ({setMoneda, setCriptoMoneda}) => {\r\n  const [listaCripto, setListaCripto] = useState([]);\r\n\r\n  const [error, setError] = useState(false);\r\n\r\n  const MONEDAS = [\r\n    { codigo: \"USD\", nombre: \"DÃ³lar Americano\" },\r\n    { codigo: \"MXN\", nombre: \"Peso Mexicano\" },\r\n    { codigo: \"EUR\", nombre: \"Euro\" },\r\n    { codigo: \"GBP\", nombre: \"Libra esterlina\" },\r\n  ];\r\n\r\n  const [moneda, SelectMoneda] = useMoneda(\"Elige tu Moneda\", \"\", MONEDAS);\r\n\r\n  const [cripto, SeleccionarCripto] = useCriptomonedas(\r\n    \"Elige tu Criptomoneda\",\r\n    \"\",\r\n    listaCripto\r\n  );\r\n\r\n  useEffect(() => {\r\n    const consultarAPI = async () => {\r\n      const url =\r\n        \"https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD\";\r\n\r\n      const resultado = await axios.get(url);\r\n\r\n      setListaCripto(resultado.data.Data);\r\n    };\r\n\r\n    consultarAPI();\r\n  }, []);\r\n\r\n  const cotizarMoneda = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (moneda === \"\" || cripto === \"\") {\r\n      setError(true);\r\n      return;\r\n    }\r\n\r\n    setError(false);\r\n\r\n    setMoneda(moneda);\r\n    setCriptoMoneda(cripto);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={cotizarMoneda}>\r\n      {error ? <Error mensaje=\"Hay un error\"></Error> : null}\r\n      <SelectMoneda></SelectMoneda>\r\n      <SeleccionarCripto></SeleccionarCripto>\r\n      <Boton type=\"submit\" value=\"Calcular\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst ResultadoDiv = styled.div`\r\n  color: #fff;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n`;\r\n\r\nconst Info = styled.p`\r\n  font-size: 18px;\r\n  span {\r\n    font-weight: bold;\r\n  }\r\n`;\r\nconst Precio = styled.p`\r\n  font-size: 30px;\r\n  span {\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst Cotizacion = ({ resultado }) => {\r\n  if (Object.keys(resultado).length === 0) return null;\r\n\r\n  return (\r\n    <ResultadoDiv>\r\n      <Precio>\r\n        El precio es: <span>{resultado.PRICE}</span>{\" \"}\r\n      </Precio>\r\n      <Info>\r\n        Precio mÃ¡s alto del dÃ­a: <span>{resultado.HIGHDAY}</span>{\" \"}\r\n      </Info>\r\n      <Info>\r\n        Precio mÃ¡s bajo del dÃ­a: <span>{resultado.LOWDAY}</span>{\" \"}\r\n      </Info>\r\n      <Info>\r\n        VariaciÃ³n Ãºltimas 24 horas: <span>{resultado.CHANGEPCT24HOUR}</span>{\" \"}\r\n      </Info>\r\n      <Info>\r\n        Ãltima ActualizaciÃ³n: <span>{resultado.LASTUPDATE}</span>{\" \"}\r\n      </Info>\r\n    </ResultadoDiv>\r\n  );\r\n};\r\n\r\nexport default Cotizacion;\r\n","import React from \"react\";\r\nimport \"./Spinner.css\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div class=\"sk-chase-dot\">\r\n      <div class=\"sk-chase-dot\"></div>\r\n      <div class=\"sk-chase-dot\"></div>\r\n      <div class=\"sk-chase-dot\"></div>\r\n      <div class=\"sk-chase-dot\"></div>\r\n      <div class=\"sk-chase-dot\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"@emotion/styled\";\nimport imagen from \"./cryptomonedas.png\";\nimport Formulario from \"./components/Formulario\";\nimport axios from \"axios\";\nimport Cotizacion from \"./components/Cotizacion\";\nimport Spinner from \"./components/Spinner\";\n\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width: 992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nconst Heading = styled.h1`\n  font-family: \"Bebas Neue\", cursive;\n  color: #fff;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n  &::after {\n    content: \"\";\n    width: 100px;\n    height: 6px;\n    background-color: #66a2fe;\n    display: block;\n  }\n`;\n\nfunction App() {\n  const [moneda, setMoneda] = useState(\"\");\n  const [criptoMoneda, setCriptoMoneda] = useState(\"\");\n  const [resultado, setResultado] = useState({});\n  const [cargando, setCargando] = useState(false);\n\n  useEffect(() => {\n    if (moneda === \"\") return;\n\n    setCargando(true);\n\n    const consultarAPI = async () => {\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptoMoneda}&tsyms=${moneda}`;\n\n      const resultado = await axios.get(url);\n\n      setResultado(resultado.data.DISPLAY[criptoMoneda][moneda]);      \n     \n    };\n\n    setTimeout(() => {\n      consultarAPI(); \n      setCargando(false);       \n    }, 300);\n  \n  }, [moneda, criptoMoneda]);\n\n  let component = cargando ? (\n    <Spinner></Spinner>\n  ) : (\n    <Cotizacion resultado={resultado}></Cotizacion>\n  );\n\n  return (\n    <Contenedor>\n      <div>\n        <Imagen src={imagen} alt=\"imagen criptomonedas\" />\n      </div>\n      <div>\n        <Heading>Cotiza Criptomonedas al Instante</Heading>\n        <Formulario\n          setMoneda={setMoneda}\n          setCriptoMoneda={setCriptoMoneda}\n        ></Formulario>\n        {component}\n      </div>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}